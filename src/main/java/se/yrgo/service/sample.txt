package se.yrgo.app;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import se.yrgo.entity.Category;
import se.yrgo.entity.Product;
import se.yrgo.entity.Supplier;
import se.yrgo.exception.InvalidTransactionException;
import se.yrgo.exception.ProductNotFoundException;
import se.yrgo.service.CategoryService;
import se.yrgo.service.InventoryTransactionService;
import se.yrgo.service.ProductService;
import se.yrgo.service.SupplierService;

import java.util.Scanner;
import java.util.List;

public class MainApp {
    private static final Scanner scanner = new Scanner(System.in);

    private static final ApplicationContext ctx =
            new ClassPathXmlApplicationContext("application.xml");

    private static final CategoryService categoryService =
            ctx.getBean(CategoryService.class);
    private static final ProductService productService =
            ctx.getBean(ProductService.class);
    private static final SupplierService supplierService =
            ctx.getBean(SupplierService.class);
    private static final InventoryTransactionService inventoryService =
            ctx.getBean(InventoryTransactionService.class);

    public static void main(String[] args) throws ProductNotFoundException, InvalidTransactionException {
        while (true) {
            System.out.println("\n=== Inventory Management System ===");
            System.out.println("1. Manage Categories");
            System.out.println("2. Manage Products");
            System.out.println("3. Manage Suppliers");
            System.out.println("4. Manage Inventory Transactions");
            System.out.println("5. Exit");
            System.out.print("Select an option: ");
            String choice = scanner.nextLine();

            switch (choice) {
                case "1" -> categoryMenu();
                case "2" -> productMenu();
                case "3" -> supplierMenu();
                case "4" -> inventoryMenu();
                case "5" -> {
                    System.out.println("Exiting. Goodbye!");
                    ((ClassPathXmlApplicationContext) ctx).close();
                    return;
                }
                default   -> System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void categoryMenu() {
        while (true) {
            System.out.println("\n--- Category Menu ---");
            System.out.println("1. Create Category");
            System.out.println("2. List All Categories");
            System.out.println("3. Find Category by ID");
            System.out.println("4. Find Category by Name");
            System.out.println("5. Update Category");
            System.out.println("6. Delete Category");
            System.out.println("7. Delete All Categories");
            System.out.println("6. Back");
            System.out.print("Choose an option: ");
            String input = scanner.nextLine();

            switch (input) {
                case "1" -> {
                    List<Category> cats = categoryService.getAllCategories();
                    cats.forEach(System.out::println);
                }
                case "2" -> {
                    System.out.print("Enter category ID: ");
                    try {
                        Long id = Long.parseLong(scanner.nextLine());
                        Category cat = categoryService.getCategoryById(id);
                        if (cat == null) {
                            System.out.println("No category found with ID " + id);
                        } else {
                            System.out.println(cat);
                        }
                    } catch (NumberFormatException e) {
                        System.out.println("Invalid ID format.");
                    }
                }
                case "3" -> { return; }
                default  -> System.out.println("Invalid option.");
            }
        }
    }

    private static void productMenu() {
        while (true) {
            System.out.println("\n--- Product Menu ---");
            System.out.println("1. List All Products");
            System.out.println("2. Find Product by ID");
            System.out.println("3. Back");
            System.out.print("Choose an option: ");
            String input = scanner.nextLine();

            switch (input) {
                case "1" -> {
                    try {
                        List<Product> products = productService.getAllProducts();
                        products.forEach(System.out::println);
                    } catch (Exception e) {
                        System.out.println("Error retrieving products: " + e.getMessage());
                    }
                }
                case "2" -> {
                    System.out.print("Enter product ID: ");
                    try {
                        Long pid = Long.parseLong(scanner.nextLine());
                        Product p = productService.getProductById(pid);
                        System.out.println(p);
                    } catch (NumberFormatException e) {
                        System.out.println("Invalid ID format.");
                    }
                }
                case "3" -> { return; }
                default  -> System.out.println("Invalid option.");
            }
        }
    }

    private static void supplierMenu() {
        while (true) {
            System.out.println("\n--- Supplier Menu ---");
            System.out.println("1. List All Suppliers");
            System.out.println("2. Find Supplier by ID");
            System.out.println("3. Back");
            System.out.print("Choose an option: ");
            String input = scanner.nextLine();

            switch (input) {
                case "1" -> supplierService.getAllSuppliers().forEach(System.out::println);
                case "2" -> {
                    System.out.print("Enter supplier ID: ");
                    try {
                        Long sid = Long.parseLong(scanner.nextLine());
                        Supplier s = supplierService.getSupplierById(sid);
                        if (s == null) {
                            System.out.println("No supplier found with ID " + sid);
                        } else {
                            System.out.println(s);
                        }
                    } catch (NumberFormatException e) {
                        System.out.println("Invalid ID format.");
                    }
                }
                case "3" -> { return; }
                default  -> System.out.println("Invalid option.");
            }
        }
    }

    private static void inventoryMenu() throws InvalidTransactionException, ProductNotFoundException {
        while (true) {
            System.out.println("\n--- Inventory Transactions ---");
            System.out.println("1. Record Sale");
            System.out.println("2. Record Restock");
            System.out.println("3. Back");
            System.out.print("Choose an option: ");
            String input = scanner.nextLine();

            switch (input) {
                case "1" -> handleTransaction("sale");
                case "2" -> handleTransaction("restock");
                case "3" -> { return; }
                default  -> System.out.println("Invalid option.");
            }
        }
    }

    private static void handleTransaction(String type) throws ProductNotFoundException, InvalidTransactionException {
        System.out.print("Enter product ID: ");
        try {
            Long pid = Long.parseLong(scanner.nextLine());
            System.out.print("Enter quantity: ");
            int qty = Integer.parseInt(scanner.nextLine());
            switch (type) {
                case "sale" -> inventoryService.recordSale(pid, qty);
                case "restock" -> inventoryService.recordRestock(pid, qty);
            }
            System.out.println("Transaction recorded.");
        } catch (NumberFormatException e) {
            System.out.println("Invalid number format.");
        }
    }
}
